# 한국 양력-음력 변환 가이드: 파이썬과 자바스크립트 라이브러리 활용 (정확도 중심)

## 서론: 정확한 날짜 변환의 중요성

일상생활이나 소프트웨어 개발에서 양력 날짜와 음력 날짜 간의 변환은 종종 필요합니다. 특히 한국의 명절(추석, 설날 등), 제사, 생일 등 전통적인 날짜 계산에는 음력이 필수적입니다. 하지만 음력 계산은 태음력과 태양력의 주기 차이로 인해 윤달 등 복잡한 요소가 많아 정확한 계산이 까다롭습니다. 잘못된 변환은 혼란을 야기할 수 있으므로, 공신력 있는 데이터를 기반으로 정확하게 변환하는 방법을 선택하는 것이 매우 중요합니다.

본 문서는 한국천문연구원(KASI)의 데이터를 기반으로 하여 높은 정확도를 제공하는 파이썬 및 자바스크립트 라이브러리를 소개하고, 실제 사용 방법을 상세히 안내합니다.

## 파이썬을 이용한 양력-음력 변환

파이썬 환경에서 가장 정확하고 신뢰할 수 있는 양력-음력 변환 방법은 `korean-lunar-calendar` 라이브러리를 사용하는 것입니다. 이 라이브러리는 [usingsky/KoreanLunarCalendar](https://github.com/usingsky/KoreanLunarCalendar) 프로젝트의 파이썬 구현체로, 한국천문연구원(KASI)의 데이터를 기반으로 계산되어 매우 높은 정확도를 자랑합니다. 네이버 달력 등 대중적으로 사용되는 검증된 서비스와 동일한 변환 결과를 제공합니다.

### 추천 라이브러리

-   라이브러리 이름: `korean-lunar-calendar` (또는 `korean_lunar_calendar_py`)
-   선택 이유:
    -   KASI 데이터 기반: 한국천문연구원의 공식 데이터를 사용하여 가장 신뢰할 수 있는 정확도를 보장합니다.
    -   검증된 사용 사례: 네이버 달력 등과 비교하여 정확성이 입증되었습니다.
    -   오프라인 작동: 네트워크 연결 없이 변환이 가능합니다.
    -   직관적인 API: 사용법이 간단하여 쉽게 적용할 수 있습니다.
    -   지원 범위: 음력 1000-01-01부터 2050-11-18까지, 양력 1000-02-13부터 2050-12-31까지의 날짜를 지원합니다.

### 설치 방법

파이썬 패키지 관리자 `pip`를 사용하여 간단하게 설치할 수 있습니다. 터미널 또는 명령 프롬프트에서 다음 명령을 실행하세요.

```bash
pip install korean-lunar-calendar
```

### 사용 예시: 양력 → 음력 변환

`korean_lunar_calendar` 객체를 생성하고 `setSolarDate` 메소드로 양력 날짜를 설정한 후, `LunarIsoFormat()` 또는 `getLunarCalendar()` 메소드를 사용하여 음력 정보를 가져옵니다.

```python
from korean_lunar_calendar import KoreanLunarCalendar

# KoreanLunarCalendar 객체 생성
calendar = KoreanLunarCalendar()

print("--- 양력 -> 음력 변환 예시 ---")

# 변환할 양력 날짜 설정: 2024년 5월 15일
calendar.setSolarDate(2024, 5, 15) 

# 변환 결과 출력
# LunarIsoFormat()은 'YYYY-MM-DD' 형식 문자열 반환 (윤달 정보 없음)
print(f"양력 2024-05-15 >> 음력 {calendar.LunarIsoFormat()}")

# getLunarCalendar()는 상세 정보를 딕셔너리 형태로 반환
lunar_info = calendar.getLunarCalendar()
print(f"상세 정보: 연도={lunar_info['year']}, 월={lunar_info['month']}, 일={lunar_info['day']}, 윤달 여부={lunar_info['isLeapMonth']}")

# 해당 날짜의 간지 정보 출력
print(f"해당 날짜의 간지: {calendar.getGapJaString()}")
```

### 사용 예시: 음력 → 양력 변환 (윤달 처리 포함)

음력에서 양력으로 변환할 때는 윤달 여부를 정확하게 지정하는 것이 매우 중요합니다. `setLunarDate` 메소드 사용 시 마지막 인자 `is_intercalation` (또는 `intercalation` - 라이브러리 버전에 따라 다를 수 있음)에 윤달이면 `True`, 아니면 `False`를 전달해야 합니다.

```python
from korean_lunar_calendar import KoreanLunarCalendar

# KoreanLunarCalendar 객체 생성
calendar = KoreanLunarCalendar()

print("\n--- 음력 -> 양력 변환 예시 ---")

# 1. 음력 2023년 '윤달' 2월 3일을 양력으로 변환
lunar_year_leap = 2023
lunar_month_leap = 2
lunar_day_leap = 3
is_leap_month_leap = True # 윤달 여부: True (2023년 음력 2월은 윤달이 있었습니다)

calendar.setLunarDate(lunar_year_leap, lunar_month_leap, lunar_day_leap, is_leap_month_leap)
print(f"음력 {lunar_year_leap}-{lunar_month_leap:02d}-{lunar_day_leap:02d} (윤달: {is_leap_month_leap}) >> 양력 {calendar.SolarIsoFormat()}") # 결과: 2023-03-24

# 2. 음력 2023년 '일반' 2월 3일을 양력으로 변환
lunar_year_normal = 2023
lunar_month_normal = 2
lunar_day_normal = 3
is_leap_month_normal = False # 윤달 여부: False

calendar.setLunarDate(lunar_year_normal, lunar_month_normal, lunar_day_normal, is_leap_month_normal)
print(f"음력 {lunar_year_normal}-{lunar_month_normal:02d}-{lunar_day_normal:02d} (윤달: {is_leap_month_normal}) >> 양력 {calendar.SolarIsoFormat()}") # 결과: 2023-02-22

# 윤달 여부를 잘못 지정하면 다른 날짜가 출력됩니다.
```

### 장단점 및 사용 시 주의사항 (파이썬)

-   장점: KASI 기반으로 인한 높은 정확도, 사용 편의성, 오프라인 작동, 넓은 지원 범위 (약 1000년 ~ 2050년).
-   단점: 약 2050년 이후의 날짜는 지원하지 않습니다.
-   주의사항:
    -   음력 → 양력 변환 시 윤달 여부(`is_intercalation`) 인자를 정확히 입력해야 합니다.
    -   지원 범위 외의 날짜에 대해서는 정확한 변환을 보장할 수 없습니다.

## 자바스크립트를 이용한 양력-음력 변환

웹 환경이나 Node.js 환경에서 자바스크립트를 사용한다면, 파이썬 라이브러리와 마찬가지로 KASI 데이터를 기반으로 하는 라이브러리를 선택하는 것이 가장 정확합니다. `usingsky/korean_lunar_calendar_js` 라이브러리가 이러한 기준을 만족합니다.

### 추천 라이브러리

-   라이브러리 이름: `usingsky/korean_lunar_calendar_js` (npm 패키지 이름은 `korean-lunar-calendar`)
-   선택 이유:
    -   KASI 데이터 기반: 파이썬 라이브러리와 동일하게 한국천문연구원 기준을 따르므로 가장 높은 신뢰성을 가집니다.
    -   파이썬 라이브러리와 연관성: 동일한 `usingsky/KoreanLunarCalendar` 프로젝트의 자바스크립트 구현체로 핵심 로직이 동일합니다.
    -   넓은 지원 범위: 파이썬 버전과 마찬가지로 약 1000년 ~ 2050년 범위의 날짜를 지원합니다.
    -   오프라인 작동: 데이터 파일을 내장하고 있어 네트워크 연결이 필요 없습니다.

### 설치 방법

Node.js 환경에서는 npm 또는 yarn을 사용하여 설치할 수 있습니다.

```bash
# npm 사용 시
npm install korean-lunar-calendar

# yarn 사용 시
yarn add korean-lunar-calendar
```

웹 브라우저 환경에서는 번들링 도구(Webpack, Parcel 등)를 사용하거나, 직접 소스 파일을 포함시키는 방식 등을 사용할 수 있습니다. (참고: 레퍼런스 문서에는 CDN 사용법이 명시되어 있지 않으므로 npm/yarn 설치 후 번들링을 권장합니다.)

### 사용 예시: 양력 → 음력 변환

설치 후 `require` (Node.js) 또는 `import` (모듈 시스템)로 라이브러리를 불러와 `KoreanLunarCalendar` 객체를 생성합니다. `setSolarDate` 메소드로 양력 날짜를 설정하고, `getLunarCalendar()` 메소드로 음력 정보를 가져옵니다.

```javascript
// Node.js 환경에서 실행 시:
const KoreanLunarCalendar = require('korean-lunar-calendar');

// 브라우저 환경에서 번들링 사용 시:
// import KoreanLunarCalendar from 'korean-lunar-calendar';

// KoreanLunarCalendar 객체 생성
const calendar = new KoreanLunarCalendar();

console.log("--- 양력 -> 음력 변환 예시 (JS) ---");

// 변환할 양력 날짜 설정: 2024년 5월 15일
calendar.setSolarDate(2024, 5, 15);

// 변환 결과 가져오기
const lunarDate = calendar.getLunarCalendar();

// 결과 출력
// 월과 일은 두 자리로 표시되도록 padStart 사용
console.log(`양력 2024-05-15 >> 음력 ${lunarDate.year}-${String(lunarDate.month).padStart(2, '0')}-${String(lunarDate.day).padStart(2, '0')} (윤달: ${lunarDate.isLeapMonth})`);

// 간지 정보는 getGapJaString() 메소드 사용
// console.log(`해당 날짜의 간지: ${calendar.getGapJaString()}`); // JS 라이브러리에 이 메소드가 있는지 확인 필요. 레퍼런스 JS 예시에는 없으므로 생략.
```
*(참고: 제공된 자바스크립트 예시에는 `getGapJaString` 메소드가 없으므로 해당 부분은 제외했습니다. 필요 시 라이브러리 문서를 확인하시기 바랍니다.)*

### 사용 예시: 음력 → 양력 변환 (윤달 처리 포함)

자바스크립트에서도 음력에서 양력으로 변환 시 윤달 여부(`isLeapMonth`) 인자를 정확하게 전달해야 합니다. `setLunarDate` 메소드의 네 번째 인자로 윤달 여부를 `true` 또는 `false`로 지정합니다.

```javascript
// Node.js 환경에서 실행 시:
const KoreanLunarCalendar = require('korean-lunar-calendar');
const calendar = new KoreanLunarCalendar();

console.log("\n--- 음력 -> 양력 변환 예시 (JS) ---");

// 1. 음력 2023년 '윤달' 2월 3일을 양력으로 변환
const lunarYearLeap = 2023;
const lunarMonthLeap = 2;
const lunarDayLeap = 3;
const isLeapMonthLeap = true; // 윤달 여부: true (2023년 음력 2월은 윤달이 있었습니다)

calendar.setLunarDate(lunarYearLeap, lunarMonthLeap, lunarDayLeap, isLeapMonthLeap);
const solarDateLeap = calendar.getSolarCalendar();
console.log(`음력 ${lunarYearLeap}-${String(lunarMonthLeap).padStart(2, '0')}-${String(lunarDayLeap).padStart(2, '0')} (윤달: ${isLeapMonthLeap}) >> 양력 ${solarDateLeap.year}-${String(solarDateLeap.month).padStart(2, '0')}-${String(solarDateLeap.day).padStart(2, '0')}`); // 결과: 2023-3-24

// 2. 음력 2023년 '일반' 2월 3일을 양력으로 변환
const lunarYearNormal = 2023;
const lunarMonthNormal = 2;
const lunarDayNormal = 3;
const isLeapMonthNormal = false; // 윤달 여부: false

calendar.setLunarDate(lunarYearNormal, lunarMonthNormal, lunarDayNormal, isLeapMonthNormal);
const solarDateNormal = calendar.getSolarCalendar();
console.log(`음력 ${lunarYearNormal}-${String(lunarMonthNormal).padStart(2, '0')}-${String(lunarDayNormal).padStart(2, '0')} (윤달: ${isLeapMonthNormal}) >> 양력 ${solarDateNormal.year}-${String(solarDateNormal.month).padStart(2, '0')}-${String(solarDateNormal.day).padStart(2, '0')}`); // 결과: 2023-2-22

// 윤달 여부를 잘못 지정하면 다른 날짜가 출력됩니다.
```

### 장단점 및 사용 시 주의사항 (자바스크립트)

-   장점: KASI 기반으로 인한 높은 정확도, 파이썬 라이브러리와 동일한 로직으로 일관성 유지, 넓은 지원 범위 (약 1000년 ~ 2050년), 오프라인 작동.
-   단점: 약 2050년 이후의 날짜는 지원하지 않습니다.
-   주의사항:
    -   음력 → 양력 변환 시 윤달 여부(`isLeapMonth`) 인자를 정확히 입력해야 합니다.
    -   지원 범위 외의 날짜에 대해서는 정확한 변환을 보장할 수 없습니다.
    -   데이터 테이블 기반 방식 등 다른 접근 방식도 존재하지만, 정확도와 유지보수 측면에서 KASI 기반 라이브러리 사용이 더 유리합니다.

## 정확도를 높이기 위한 추가 팁: 결과 검증

아무리 정확한 라이브러리를 사용하더라도, 예상치 못한 오류나 특정 날짜에 대한 문제 가능성은 항상 존재합니다. 따라서 변환 결과를 실제로 사용하기 전에 공신력 있는 다른 달력과 비교하여 검증하는 과정을 거치는 것이 좋습니다.

-   검증 방법:
    -   온라인 달력 활용: 네이버 달력, 다음 달력 등에서 제공하는 양력/음력 변환 기능을 사용하여 개발한 변환 결과와 비교합니다.
    -   국가 공식 달력 활용: 한국천문연구원 등에서 발행하는 공식 달력 정보를 참고하여 특정 기준 날짜의 변환 결과를 확인합니다.
-   특히 윤달이 있는 해나 특정 월의 마지막 날 등 경계 값이나 예외적인 날짜에 대한 변환 결과를 집중적으로 검증하는 것이 효과적입니다.

## 결론: 어떤 방법을 선택할 것인가?

| 특징             | 파이썬 (`korean-lunar-calendar`)                       | 자바스크립트 (`usingsky/korean_lunar_calendar_js`)         |
| :--------------- | :------------------------------------------------------- | :--------------------------------------------------------- |
| 개발 환경    | 파이썬 기반 프로젝트/시스템                              | 웹 프런트엔드, Node.js 백엔드                            |
| 정확도 기반  | 한국천문연구원(KASI) 데이터                          | 한국천문연구원(KASI) 데이터                            |
| 신뢰성       | 매우 높음                                            | 매우 높음                                              |
| 지원 범위    | 약 1000년 ~ 2050년                                       | 약 1000년 ~ 2050년                                         |
| 윤달 처리    | 지원 (변환 시 윤달 여부 명시 필수)                       | 지원 (변환 시 윤달 여부 명시 필수)                       |
| 설치         | `pip install korean-lunar-calendar`                      | `npm install korean-lunar-calendar`<br> (`yarn add ...`)   |
| 사용 편의성  | 직관적인 API                                             | 직관적인 API                                               |
| 주요 고려사항| 약 2050년 이후 날짜 미지원                               | 약 2050년 이후 날짜 미지원                                 |

사용하려는 개발 환경(파이썬 또는 자바스크립트)에 따라 선택은 명확합니다.

-   파이썬 환경이라면 `korean-lunar-calendar` 라이브러리를 사용하세요.
-   자바스크립트 환경이라면 `usingsky/korean_lunar_calendar_js` 라이브러리 (npm 패키지 이름: `korean-lunar-calendar`)를 사용하세요.

두 라이브러리 모두 한국천문연구원의 데이터를 기반으로 하여 현재까지 가장 높은 정확도와 신뢰성을 보장합니다. 설치 방법도 간단하며, 제공된 코드 예시를 참고하면 쉽게 날짜 변환 기능을 구현할 수 있습니다.

다만, 두 라이브러리 모두 약 2050년 이후의 날짜에 대해서는 변환을 지원하지 않는다는 점을 염두에 두어야 합니다. 만약 그 이후의 날짜 변환이 필요하다면, KASI의 최신 데이터나 다른 공식적인 방법을 추가적으로 검토해야 합니다.

어떤 방법을 사용하든, 구현 후에는 반드시 몇 가지 대표적인 날짜(특히 윤달 포함 날짜)를 선택하여 공신력 있는 달력과 비교하는 검증 과정을 거쳐 정확성을 최종 확인하시기를 강력히 권장합니다. 이를 통해 사용자는 가장 신뢰할 수 있는 양력-음력 변환 기능을 제공받을 수 있습니다.